-- 1. Crear tabla de whitelist para usuarios autorizados
CREATE TABLE IF NOT EXISTS public.authorized_users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    password_hash TEXT NOT NULL,
    nombre TEXT NOT NULL,
    rol TEXT DEFAULT 'admin',
    activo BOOLEAN DEFAULT true,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 2. Habilitar RLS
ALTER TABLE public.authorized_users ENABLE ROW LEVEL SECURITY;

-- 3. Políticas de acceso (solo lectura pública para login)
CREATE POLICY "Allow public read for login" ON public.authorized_users
    FOR SELECT USING (activo = true);

-- Política para que usuarios autenticados puedan modificar
CREATE POLICY "Allow authenticated users full access" ON public.authorized_users
    FOR ALL USING (true) WITH CHECK (true);

-- 4. Función para actualizar updated_at automáticamente
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_authorized_users_updated_at
    BEFORE UPDATE ON public.authorized_users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- 5. Insertar usuario administrador por defecto
-- Contraseña: admin123 (CÁMBIALA INMEDIATAMENTE después del primer login)
-- Hash generado con bcrypt, rounds=10
INSERT INTO public.authorized_users (email, password_hash, nombre, rol)
VALUES (
    'admin@jcvillagran.cl',
    '$2a$10$rX5Z3vY8K9hJ1mN.qL7eOeF5pZ7qK9hJ1mN.qL7eOeF5pZ7qK9hJ1m',
    'Administrador',
    'admin'
)
ON CONFLICT (email) DO NOTHING;

-- Nota: Para producción, deberás cambiar la contraseña usando el panel de whitelist
